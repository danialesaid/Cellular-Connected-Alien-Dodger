
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000009f4  00000a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800136  00800136  00000abe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001594  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7f  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af8  00000000  00000000  00002c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a3  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000873  00000000  00000000  00004253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004ac6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	eb c0       	rjmp	.+470    	; 0x20c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ef       	ldi	r30, 0xF4	; 244
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 33       	cpi	r26, 0x36	; 54
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e3       	ldi	r26, 0x36	; 54
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 37       	cpi	r26, 0x75	; 117
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ed d2       	rcall	.+1498   	; 0x69e <main>
  c4:	95 c4       	rjmp	.+2346   	; 0x9f0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
		return UDR1;
	}
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	28 98       	cbi	0x05, 0	; 5
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	29 9a       	sbi	0x05, 1	; 5
  f4:	00 00       	nop
  f6:	29 98       	cbi	0x05, 1	; 5
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_init>:
 106:	84 e6       	ldi	r24, 0x64	; 100
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	de df       	rcall	.-68     	; 0xc8 <delay_ms>
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	ef df       	rcall	.-34     	; 0xee <LCD_WriteCommand>
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	ed df       	rcall	.-38     	; 0xee <LCD_WriteCommand>
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	eb df       	rcall	.-42     	; 0xee <LCD_WriteCommand>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	e9 df       	rcall	.-46     	; 0xee <LCD_WriteCommand>
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	d3 cf       	rjmp	.-90     	; 0xc8 <delay_ms>
 122:	08 95       	ret

00000124 <LCD_WriteData>:
 124:	28 9a       	sbi	0x05, 0	; 5
 126:	88 b9       	out	0x08, r24	; 8
 128:	29 9a       	sbi	0x05, 1	; 5
 12a:	00 00       	nop
 12c:	29 98       	cbi	0x05, 1	; 5
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ca cf       	rjmp	.-108    	; 0xc8 <delay_ms>
 134:	08 95       	ret

00000136 <LCD_Cursor>:
 136:	81 31       	cpi	r24, 0x11	; 17
 138:	18 f4       	brcc	.+6      	; 0x140 <LCD_Cursor+0xa>
 13a:	81 58       	subi	r24, 0x81	; 129
 13c:	d8 cf       	rjmp	.-80     	; 0xee <LCD_WriteCommand>
 13e:	08 95       	ret
 140:	81 55       	subi	r24, 0x51	; 81
 142:	d5 cf       	rjmp	.-86     	; 0xee <LCD_WriteCommand>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	ea df       	rcall	.-44     	; 0x136 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	df df       	rcall	.-66     	; 0x124 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <LCD_DisplayString_M>:
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	fb 01       	movw	r30, r22
 180:	90 81       	ld	r25, Z
 182:	99 23       	and	r25, r25
 184:	51 f0       	breq	.+20     	; 0x19a <LCD_DisplayString_M+0x22>
 186:	eb 01       	movw	r28, r22
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	18 0f       	add	r17, r24
 18c:	d4 df       	rcall	.-88     	; 0x136 <LCD_Cursor>
 18e:	89 91       	ld	r24, Y+
 190:	c9 df       	rcall	.-110    	; 0x124 <LCD_WriteData>
 192:	81 2f       	mov	r24, r17
 194:	98 81       	ld	r25, Y
 196:	91 11       	cpse	r25, r1
 198:	f7 cf       	rjmp	.-18     	; 0x188 <LCD_DisplayString_M+0x10>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret

000001a2 <TimerSet>:
 1a2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_M>
 1a6:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_M+0x1>
 1aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_M+0x2>
 1ae:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_M+0x3>
 1b2:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <_avr_timer_cntcurr>
 1b6:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <_avr_timer_cntcurr+0x1>
 1ba:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_avr_timer_cntcurr+0x2>
 1be:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <_avr_timer_cntcurr+0x3>
 1c2:	08 95       	ret

000001c4 <TimerOn>:
 1c4:	8b e0       	ldi	r24, 0x0B	; 11
 1c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1ca:	8d e7       	ldi	r24, 0x7D	; 125
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1e4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 1e8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 1ec:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 1f0:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 1f4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
 1f8:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
 1fc:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
 200:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
 204:	8f b7       	in	r24, 0x3f	; 63
 206:	80 68       	ori	r24, 0x80	; 128
 208:	8f bf       	out	0x3f, r24	; 63
 20a:	08 95       	ret

0000020c <__vector_13>:
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <_avr_timer_cntcurr>
 222:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x1>
 226:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <_avr_timer_cntcurr+0x2>
 22a:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <_avr_timer_cntcurr+0x3>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	a1 09       	sbc	r26, r1
 232:	b1 09       	sbc	r27, r1
 234:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
 238:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
 23c:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
 240:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
 244:	89 2b       	or	r24, r25
 246:	8a 2b       	or	r24, r26
 248:	8b 2b       	or	r24, r27
 24a:	99 f4       	brne	.+38     	; 0x272 <__vector_13+0x66>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <TimerFlag>
 252:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 256:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 25a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 25e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 262:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
 266:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
 26a:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
 26e:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <initUSART>:
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	81 f0       	breq	.+32     	; 0x2a8 <initUSART+0x24>
 288:	e1 ec       	ldi	r30, 0xC1	; 193
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	88 61       	ori	r24, 0x18	; 24
 290:	80 83       	st	Z, r24
 292:	e2 ec       	ldi	r30, 0xC2	; 194
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	86 60       	ori	r24, 0x06	; 6
 29a:	80 83       	st	Z, r24
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2a2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2a6:	08 95       	ret
 2a8:	e9 ec       	ldi	r30, 0xC9	; 201
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	88 61       	ori	r24, 0x18	; 24
 2b0:	80 83       	st	Z, r24
 2b2:	ea ec       	ldi	r30, 0xCA	; 202
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	86 60       	ori	r24, 0x06	; 6
 2ba:	80 83       	st	Z, r24
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2c2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2c6:	08 95       	ret

000002c8 <USART_Send>:
 2c8:	61 30       	cpi	r22, 0x01	; 1
 2ca:	41 f0       	breq	.+16     	; 0x2dc <USART_Send+0x14>
 2cc:	e0 ec       	ldi	r30, 0xC0	; 192
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	90 81       	ld	r25, Z
 2d2:	95 ff       	sbrs	r25, 5
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <USART_Send+0x8>
 2d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2da:	08 95       	ret
 2dc:	e8 ec       	ldi	r30, 0xC8	; 200
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	90 81       	ld	r25, Z
 2e2:	95 ff       	sbrs	r25, 5
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <USART_Send+0x18>
 2e6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2ea:	08 95       	ret

000002ec <ADC_init>:
#define CUSTOM_PLAYER_CHAR 1
#define BLOCK_CUSTOM_CHAR 2

void ADC_init()
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
 2ec:	ea e7       	ldi	r30, 0x7A	; 122
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	80 6c       	ori	r24, 0xC0	; 192
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret

000002f8 <JSTick>:
unsigned short ADCUpDown;
unsigned short ADCLeftRight;
unsigned char cursorPosition = 1;
void JSTick()
{
	switch(JSState)
 2f8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <JSState>
 2fc:	88 23       	and	r24, r24
 2fe:	19 f0       	breq	.+6      	; 0x306 <JSTick+0xe>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	79 f0       	breq	.+30     	; 0x322 <JSTick+0x2a>
 304:	04 c0       	rjmp	.+8      	; 0x30e <JSTick+0x16>
	{
		case JSInit:
			JSState = checkJS;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <JSState>
			break;
 30c:	0a c0       	rjmp	.+20     	; 0x322 <JSTick+0x2a>
			break;

		default:
			break;
	}
	switch(JSState)
 30e:	88 23       	and	r24, r24
 310:	21 f0       	breq	.+8      	; 0x31a <JSTick+0x22>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	09 f0       	breq	.+2      	; 0x318 <JSTick+0x20>
 316:	7d c0       	rjmp	.+250    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 318:	04 c0       	rjmp	.+8      	; 0x322 <JSTick+0x2a>
	{
		case JSInit:
			cursorPosition = 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
			break;
 320:	08 95       	ret

		case checkJS:
			LCD[cursorPosition] = 0;
 322:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <cursorPosition>
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ee 5a       	subi	r30, 0xAE	; 174
 32a:	fe 4f       	sbci	r31, 0xFE	; 254
 32c:	10 82       	st	Z, r1
				
			ADMUX = ADC_MUX_LEFT_RIGHT;
 32e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 332:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			ADCSRA |= (1 << ADSC);
 336:	ea e7       	ldi	r30, 0x7A	; 122
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	80 83       	st	Z, r24
			while( ADCSRA & (1 << ADSC) );
 340:	80 81       	ld	r24, Z
 342:	86 fd       	sbrc	r24, 6
 344:	fd cf       	rjmp	.-6      	; 0x340 <JSTick+0x48>
			ADCLeftRight = ADC;
 346:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 34a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 34e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <ADCLeftRight+0x1>
 352:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ADCLeftRight>
		
			ADMUX = ADC_MUX_UP_DOWN;
 356:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ADC_MUX_UP_DOWN>
 35a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			ADCSRA |= (1 << ADSC);
 35e:	ea e7       	ldi	r30, 0x7A	; 122
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 64       	ori	r24, 0x40	; 64
 366:	80 83       	st	Z, r24
			while( ADCSRA & (1 << ADSC) );
 368:	80 81       	ld	r24, Z
 36a:	86 fd       	sbrc	r24, 6
 36c:	fd cf       	rjmp	.-6      	; 0x368 <JSTick+0x70>
			ADCUpDown = ADC;
 36e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 372:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 376:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <ADCUpDown+0x1>
 37a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ADCUpDown>
		
			if(ADCUpDown < 200)
 37e:	88 3c       	cpi	r24, 0xC8	; 200
 380:	91 05       	cpc	r25, r1
 382:	50 f4       	brcc	.+20     	; 0x398 <JSTick+0xa0>
			{
				if(cursorPosition >= 17 && cursorPosition < 29)
 384:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cursorPosition>
 388:	9f ee       	ldi	r25, 0xEF	; 239
 38a:	98 0f       	add	r25, r24
 38c:	9c 30       	cpi	r25, 0x0C	; 12
 38e:	70 f4       	brcc	.+28     	; 0x3ac <JSTick+0xb4>
				{
					cursorPosition -= 16;
 390:	80 51       	subi	r24, 0x10	; 16
 392:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
 396:	0a c0       	rjmp	.+20     	; 0x3ac <JSTick+0xb4>
				}
			}
			else if(ADCUpDown > 500)
 398:	85 3f       	cpi	r24, 0xF5	; 245
 39a:	91 40       	sbci	r25, 0x01	; 1
 39c:	38 f0       	brcs	.+14     	; 0x3ac <JSTick+0xb4>
			{
				if(cursorPosition <= 16)
 39e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cursorPosition>
 3a2:	81 31       	cpi	r24, 0x11	; 17
 3a4:	18 f4       	brcc	.+6      	; 0x3ac <JSTick+0xb4>
				{
					cursorPosition += 16;
 3a6:	80 5f       	subi	r24, 0xF0	; 240
 3a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
				}
			}
			if(ADCLeftRight < 200)
 3ac:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ADCLeftRight>
 3b0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ADCLeftRight+0x1>
 3b4:	88 3c       	cpi	r24, 0xC8	; 200
 3b6:	91 05       	cpc	r25, r1
 3b8:	50 f4       	brcc	.+20     	; 0x3ce <JSTick+0xd6>
			{
				if(cursorPosition != 1 && cursorPosition != 17)
 3ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cursorPosition>
 3be:	98 2f       	mov	r25, r24
 3c0:	9f 7e       	andi	r25, 0xEF	; 239
 3c2:	91 30       	cpi	r25, 0x01	; 1
 3c4:	91 f0       	breq	.+36     	; 0x3ea <JSTick+0xf2>
				{
					cursorPosition -= 1;
 3c6:	81 50       	subi	r24, 0x01	; 1
 3c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
 3cc:	0e c0       	rjmp	.+28     	; 0x3ea <JSTick+0xf2>
				}
			}
		
			else if(ADCLeftRight > 500)
 3ce:	85 3f       	cpi	r24, 0xF5	; 245
 3d0:	91 40       	sbci	r25, 0x01	; 1
 3d2:	58 f0       	brcs	.+22     	; 0x3ea <JSTick+0xf2>
			{
				if(cursorPosition != 16 && cursorPosition != 32 && cursorPosition != 13 && cursorPosition != 14 && cursorPosition != 15 && cursorPosition != 16)
 3d4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cursorPosition>
 3d8:	80 32       	cpi	r24, 0x20	; 32
 3da:	39 f0       	breq	.+14     	; 0x3ea <JSTick+0xf2>
 3dc:	93 ef       	ldi	r25, 0xF3	; 243
 3de:	98 0f       	add	r25, r24
 3e0:	94 30       	cpi	r25, 0x04	; 4
 3e2:	18 f0       	brcs	.+6      	; 0x3ea <JSTick+0xf2>
				{
					cursorPosition += 1;
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
				}
			}
			
			if(LCD[cursorPosition] == BLOCK)
 3ea:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <cursorPosition>
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	ee 5a       	subi	r30, 0xAE	; 174
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
 3f6:	30 81       	ld	r19, Z
 3f8:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <BLOCK>
 3fc:	32 13       	cpse	r19, r18
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			{
				playerHitBlock = 1;
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <playerHitBlock>
			}
			
			
			LCD[cursorPosition] = PLAYER;
 406:	fc 01       	movw	r30, r24
 408:	ee 5a       	subi	r30, 0xAE	; 174
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <PLAYER>
 410:	20 83       	st	Z, r18
 412:	08 95       	ret

00000414 <generateBlocksTick>:
unsigned char newBlockType;
unsigned char newBlockStartPos;
int randomlyGeneratedInt;
void generateBlocksTick()
{
	switch(generateBlocksState)
 414:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <generateBlocksState>
 418:	88 23       	and	r24, r24
 41a:	19 f0       	breq	.+6      	; 0x422 <generateBlocksTick+0xe>
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	39 f0       	breq	.+14     	; 0x42e <generateBlocksTick+0x1a>
 420:	04 c0       	rjmp	.+8      	; 0x42a <generateBlocksTick+0x16>
	{
		case generateBlocksInit:
		generateBlocksState = generateBlocks;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <generateBlocksState>
		break;
 428:	02 c0       	rjmp	.+4      	; 0x42e <generateBlocksTick+0x1a>

		default:
		break;
	}

	switch(generateBlocksState)
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	91 f5       	brne	.+100    	; 0x492 <generateBlocksTick+0x7e>
	{
		case generateBlocksInit:
		break;

		case generateBlocks:
		randomlyGeneratedInt = rand();
 42e:	42 d2       	rcall	.+1156   	; 0x8b4 <rand>
		randomlyGeneratedInt = randomlyGeneratedInt % 2;
 430:	81 70       	andi	r24, 0x01	; 1
 432:	90 78       	andi	r25, 0x80	; 128
 434:	99 23       	and	r25, r25
 436:	24 f4       	brge	.+8      	; 0x440 <generateBlocksTick+0x2c>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	8e 6f       	ori	r24, 0xFE	; 254
 43c:	9f 6f       	ori	r25, 0xFF	; 255
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <randomlyGeneratedInt+0x1>
 444:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <randomlyGeneratedInt>
		if(randomlyGeneratedInt == 0)
 448:	89 2b       	or	r24, r25
 44a:	51 f4       	brne	.+20     	; 0x460 <generateBlocksTick+0x4c>
		{
			if(LCD[29] != BLOCK)
 44c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <LCD+0x1d>
 450:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BLOCK>
 454:	98 17       	cp	r25, r24
 456:	e9 f0       	breq	.+58     	; 0x492 <generateBlocksTick+0x7e>
			{
				newBlockStartPos = 13;
 458:	8d e0       	ldi	r24, 0x0D	; 13
 45a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <newBlockStartPos>
 45e:	03 c0       	rjmp	.+6      	; 0x466 <generateBlocksTick+0x52>
		}
		else
		{
			//if(LCD[16] != BLOCK)
			//{
				newBlockStartPos = 32;
 460:	80 e2       	ldi	r24, 0x20	; 32
 462:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <newBlockStartPos>
			//{
				//break;
			//}
		}
		
		randomlyGeneratedInt = rand();
 466:	26 d2       	rcall	.+1100   	; 0x8b4 <rand>
		randomlyGeneratedInt = randomlyGeneratedInt % 100;
 468:	64 e6       	ldi	r22, 0x64	; 100
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	b5 d1       	rcall	.+874    	; 0x7d8 <__divmodhi4>
 46e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <randomlyGeneratedInt+0x1>
 472:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <randomlyGeneratedInt>
		
		if(randomlyGeneratedInt > regularGenerationThreshold)
 476:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <regularGenerationThreshold>
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	28 17       	cp	r18, r24
 47e:	39 07       	cpc	r19, r25
 480:	44 f4       	brge	.+16     	; 0x492 <generateBlocksTick+0x7e>
		{
			LCD[newBlockStartPos] = BLOCK;
 482:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <newBlockStartPos>
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	ee 5a       	subi	r30, 0xAE	; 174
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BLOCK>
 490:	80 83       	st	Z, r24
 492:	08 95       	ret

00000494 <updateBlocksTick>:


enum updateBlocksStates {updateBlocksInit, updateBlocks} updateBlocksState;

void updateBlocksTick()
{
 494:	cf 93       	push	r28
	switch(updateBlocksState)
 496:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <updateBlocksState>
 49a:	88 23       	and	r24, r24
 49c:	19 f0       	breq	.+6      	; 0x4a4 <updateBlocksTick+0x10>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <updateBlocksTick+0x1c>
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <updateBlocksTick+0x18>
	{
		case updateBlocksInit:
			updateBlocksState = updateBlocks;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <updateBlocksState>
			break;
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <updateBlocksTick+0x1c>
			break;

		default:
			break;
	}
	switch(updateBlocksState)
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	21 f5       	brne	.+72     	; 0x4f8 <updateBlocksTick+0x64>

		
			for(int cell = 1; cell <= 32; ++cell)
			{
				
				if(LCD[cell] == BLOCK)
 4b0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <BLOCK>
				{
					LCD[cell] = 0;
					if(cell != 1 && cell != 17)
					{	
						if(LCD[cell - 1] == PLAYER)
 4b4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <PLAYER>
 4b8:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <playerHitBlock>
 4bc:	e2 e5       	ldi	r30, 0x52	; 82
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	90 e0       	ldi	r25, 0x00	; 0
						{
							playerHitBlock= 1;
 4c4:	c1 e0       	ldi	r28, 0x01	; 1
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <updateBlocksTick+0x38>
 4c8:	31 96       	adiw	r30, 0x01	; 1
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	ac 01       	movw	r20, r24
 4ce:	41 50       	subi	r20, 0x01	; 1
 4d0:	51 09       	sbc	r21, r1
 4d2:	df 01       	movw	r26, r30

		
			for(int cell = 1; cell <= 32; ++cell)
			{
				
				if(LCD[cell] == BLOCK)
 4d4:	21 81       	ldd	r18, Z+1	; 0x01
 4d6:	23 13       	cpse	r18, r19
 4d8:	0a c0       	rjmp	.+20     	; 0x4ee <updateBlocksTick+0x5a>
				{
					LCD[cell] = 0;
 4da:	11 82       	std	Z+1, r1	; 0x01
					if(cell != 1 && cell != 17)
 4dc:	4f 7e       	andi	r20, 0xEF	; 239
 4de:	41 30       	cpi	r20, 0x01	; 1
 4e0:	51 05       	cpc	r21, r1
 4e2:	91 f3       	breq	.-28     	; 0x4c8 <updateBlocksTick+0x34>
					{	
						if(LCD[cell - 1] == PLAYER)
 4e4:	20 81       	ld	r18, Z
 4e6:	26 13       	cpse	r18, r22
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <updateBlocksTick+0x58>
						{
							playerHitBlock= 1;
 4ea:	7c 2f       	mov	r23, r28
						}
						//else
						//{
							//playerHitBlock = 0;
						//}
						LCD[cell - 1] = BLOCK;	
 4ec:	3c 93       	st	X, r19

		case updateBlocks:
		

		
			for(int cell = 1; cell <= 32; ++cell)
 4ee:	81 32       	cpi	r24, 0x21	; 33
 4f0:	91 05       	cpc	r25, r1
 4f2:	54 f3       	brlt	.-44     	; 0x4c8 <updateBlocksTick+0x34>
 4f4:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <playerHitBlock>
			break;

		default:
			break;
	}
}
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <updateLCDTick>:


enum LCDUpdateStates {LCDUpdateInit, updateLCD} LCDUpdateState;
char playerScoreStr[4];
void updateLCDTick()
{
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
	switch(LCDUpdateState)
 508:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <LCDUpdateState>
 50c:	88 23       	and	r24, r24
 50e:	19 f0       	breq	.+6      	; 0x516 <updateLCDTick+0x1a>
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	41 f0       	breq	.+16     	; 0x524 <updateLCDTick+0x28>
 514:	04 c0       	rjmp	.+8      	; 0x51e <updateLCDTick+0x22>
	{
		case LCDUpdateInit:
		LCDUpdateState = updateLCD;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <LCDUpdateState>
		break;
 51c:	03 c0       	rjmp	.+6      	; 0x524 <updateLCDTick+0x28>
		break;

		default:
		break;
	}
	switch(LCDUpdateState)
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	09 f0       	breq	.+2      	; 0x524 <updateLCDTick+0x28>
 522:	9b c0       	rjmp	.+310    	; 0x65a <updateLCDTick+0x15e>
 524:	03 e5       	ldi	r16, 0x53	; 83
 526:	11 e0       	ldi	r17, 0x01	; 1


enum LCDUpdateStates {LCDUpdateInit, updateLCD} LCDUpdateState;
char playerScoreStr[4];
void updateLCDTick()
{
 528:	78 01       	movw	r14, r16
 52a:	c1 e0       	ldi	r28, 0x01	; 1
		case updateLCD:
		

		for(int cell = 1; cell <= 12; ++cell)
		{
			LCD_Cursor(cell);
 52c:	8c 2f       	mov	r24, r28
 52e:	03 de       	rcall	.-1018   	; 0x136 <LCD_Cursor>
			if(LCD[cell] == PLAYER)
 530:	f7 01       	movw	r30, r14
 532:	81 91       	ld	r24, Z+
 534:	7f 01       	movw	r14, r30
 536:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <PLAYER>
 53a:	89 13       	cpse	r24, r25
 53c:	03 c0       	rjmp	.+6      	; 0x544 <updateLCDTick+0x48>
			{
				LCD_WriteData(CUSTOM_PLAYER_CHAR);
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	f1 dd       	rcall	.-1054   	; 0x124 <LCD_WriteData>
 542:	0a c0       	rjmp	.+20     	; 0x558 <updateLCDTick+0x5c>
			}
			else if(LCD[cell] == BLOCK)
 544:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <BLOCK>
 548:	89 13       	cpse	r24, r25
			{
				LCD_WriteData(BLOCK_CUSTOM_CHAR);
 54a:	03 c0       	rjmp	.+6      	; 0x552 <updateLCDTick+0x56>
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	ea dd       	rcall	.-1068   	; 0x124 <LCD_WriteData>
			}
			else
			{
				LCD_WriteData(SPACE);
 550:	03 c0       	rjmp	.+6      	; 0x558 <updateLCDTick+0x5c>
 552:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SPACE>
 556:	e6 dd       	rcall	.-1076   	; 0x124 <LCD_WriteData>
 558:	cf 5f       	subi	r28, 0xFF	; 255
		break;

		case updateLCD:
		

		for(int cell = 1; cell <= 12; ++cell)
 55a:	cd 30       	cpi	r28, 0x0D	; 13
 55c:	39 f7       	brne	.-50     	; 0x52c <updateLCDTick+0x30>
 55e:	0f 2e       	mov	r0, r31
 560:	f3 e6       	ldi	r31, 0x63	; 99
 562:	ef 2e       	mov	r14, r31
 564:	f1 e0       	ldi	r31, 0x01	; 1
 566:	ff 2e       	mov	r15, r31
 568:	f0 2d       	mov	r31, r0
			}
		}

		for(int cell = 17; cell <= 32; ++cell)
		{
			LCD_Cursor(cell);
 56a:	c1 e1       	ldi	r28, 0x11	; 17
 56c:	8c 2f       	mov	r24, r28
 56e:	e3 dd       	rcall	.-1082   	; 0x136 <LCD_Cursor>
			if(LCD[cell] == PLAYER)
 570:	f7 01       	movw	r30, r14
 572:	81 91       	ld	r24, Z+
 574:	7f 01       	movw	r14, r30
 576:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <PLAYER>
 57a:	89 13       	cpse	r24, r25
			{
				LCD_WriteData(CUSTOM_PLAYER_CHAR);
 57c:	03 c0       	rjmp	.+6      	; 0x584 <updateLCDTick+0x88>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	d1 dd       	rcall	.-1118   	; 0x124 <LCD_WriteData>
			}
			else if(LCD[cell] == BLOCK)
 582:	0a c0       	rjmp	.+20     	; 0x598 <updateLCDTick+0x9c>
 584:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <BLOCK>
			{
				LCD_WriteData(BLOCK_CUSTOM_CHAR);
 588:	89 13       	cpse	r24, r25
 58a:	03 c0       	rjmp	.+6      	; 0x592 <updateLCDTick+0x96>
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	ca dd       	rcall	.-1132   	; 0x124 <LCD_WriteData>
			}
			else
			{
				LCD_WriteData(SPACE);
 590:	03 c0       	rjmp	.+6      	; 0x598 <updateLCDTick+0x9c>
 592:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SPACE>
 596:	c6 dd       	rcall	.-1140   	; 0x124 <LCD_WriteData>
			{
				LCD_WriteData(SPACE);
			}
		}

		for(int cell = 17; cell <= 32; ++cell)
 598:	cf 5f       	subi	r28, 0xFF	; 255
 59a:	c1 32       	cpi	r28, 0x21	; 33
			{
				LCD_WriteData(SPACE);
			}
		}

		LCD_Cursor(OFFLCD);
 59c:	39 f7       	brne	.-50     	; 0x56c <updateLCDTick+0x70>
 59e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <OFFLCD>
 5a2:	c9 dd       	rcall	.-1134   	; 0x136 <LCD_Cursor>
		
		if(playerHitBlock)
 5a4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <playerHitBlock>
 5a8:	88 23       	and	r24, r24
 5aa:	09 f4       	brne	.+2      	; 0x5ae <updateLCDTick+0xb2>
 5ac:	56 c0       	rjmp	.+172    	; 0x65a <updateLCDTick+0x15e>
		{
			JSState = JSInit;
 5ae:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <JSState>
			generateBlocksState = generateBlocksInit;
 5b2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <generateBlocksState>
			updateBlocksState = updateBlocksInit;
 5b6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <updateBlocksState>
			LCDUpdateState = LCDUpdateInit;
 5ba:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <LCDUpdateState>

			JS_TIME = 2;
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <JS_TIME>
			JSTimer = 0;
 5c4:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <JSTimer>
	
			BLOCK_UPDATE_TIME = 5;
 5c8:	85 e0       	ldi	r24, 0x05	; 5
 5ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <BLOCK_UPDATE_TIME>
			blockUpdateTimer = 0;
 5ce:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <blockUpdateTimer>

			BLOCK_GENERATE_TIME = 5;
 5d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <BLOCK_GENERATE_TIME>
			blockGenerateTimer = 0;
 5d6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <blockGenerateTimer>
			
			BLOCK_UPSPEED_TIME = 100;
 5da:	84 e6       	ldi	r24, 0x64	; 100
 5dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <BLOCK_UPSPEED_TIME>
			blockUpspeedTimer = 0;
 5e0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <blockUpspeedTimer>
			
			playerScoreTimer = 0;
 5e4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <playerScoreTimer>
			PLAYER_SCORE_UPDATE_TIME = 10;
 5e8:	8a e0       	ldi	r24, 0x0A	; 10
 5ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <PLAYER_SCORE_UPDATE_TIME>
			cursorPosition = 1;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <cursorPosition>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5f4:	4a e0       	ldi	r20, 0x0A	; 10
 5f6:	6e e4       	ldi	r22, 0x4E	; 78
 5f8:	71 e0       	ldi	r23, 0x01	; 1
 5fa:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <playerScore>
 5fe:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <playerScore+0x1>
		
			itoa(playerScore, playerScoreStr, 10);
			LCD_DisplayString(1, "Game Over");
 602:	66 d1       	rcall	.+716    	; 0x8d0 <__itoa_ncheck>
 604:	64 e2       	ldi	r22, 0x24	; 36
 606:	71 e0       	ldi	r23, 0x01	; 1
			LCD_DisplayString_M(17, "Score: ");
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	9d dd       	rcall	.-1222   	; 0x146 <LCD_DisplayString>
 60c:	6e e2       	ldi	r22, 0x2E	; 46
 60e:	71 e0       	ldi	r23, 0x01	; 1
 610:	81 e1       	ldi	r24, 0x11	; 17
			LCD_DisplayString_M( 24, playerScoreStr);
 612:	b2 dd       	rcall	.-1180   	; 0x178 <LCD_DisplayString_M>
 614:	6e e4       	ldi	r22, 0x4E	; 78
 616:	71 e0       	ldi	r23, 0x01	; 1
 618:	88 e1       	ldi	r24, 0x18	; 24
			
			
			
			
			playerHitBlock = 0;
 61a:	ae dd       	rcall	.-1188   	; 0x178 <LCD_DisplayString_M>
 61c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <playerHitBlock>
 620:	ce e4       	ldi	r28, 0x4E	; 78
 622:	d1 e0       	ldi	r29, 0x01	; 1
 624:	0f 2e       	mov	r0, r31
 626:	f2 e5       	ldi	r31, 0x52	; 82
 628:	ef 2e       	mov	r14, r31
 62a:	f1 e0       	ldi	r31, 0x01	; 1
					j=4;
					for(int i =0;i<j;++i)
					{
						//if (USART_IsSendReady(0))
						//{
							USART_Send(playerScoreStr[i], 0);
 62c:	ff 2e       	mov	r15, r31
 62e:	f0 2d       	mov	r31, r0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	89 91       	ld	r24, Y+
					//{
						//
						//j=4;
					//}
					j=4;
					for(int i =0;i<j;++i)
 634:	49 de       	rcall	.-878    	; 0x2c8 <USART_Send>
 636:	ec 16       	cp	r14, r28
 638:	fd 06       	cpc	r15, r29
				//if (USART_IsSendReady(0))
										//{
					//USART_Send('X', 0);
										//}
			//	}
			delay_ms(5000);
 63a:	d1 f7       	brne	.-12     	; 0x630 <updateLCDTick+0x134>
 63c:	88 e8       	ldi	r24, 0x88	; 136
 63e:	93 e1       	ldi	r25, 0x13	; 19
 640:	43 dd       	rcall	.-1402   	; 0xc8 <delay_ms>
			playerScore = 0;
 642:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <playerScore+0x1>
 646:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <playerScore>
 64a:	83 e7       	ldi	r24, 0x73	; 115
 64c:	91 e0       	ldi	r25, 0x01	; 1
			
					for(int cell = 1; cell <= 32; ++cell)
					{
						LCD[cell] = 0;
 64e:	f8 01       	movw	r30, r16
 650:	11 92       	st	Z+, r1
 652:	8f 01       	movw	r16, r30
										//}
			//	}
			delay_ms(5000);
			playerScore = 0;
			
					for(int cell = 1; cell <= 32; ++cell)
 654:	e8 17       	cp	r30, r24
 656:	f9 07       	cpc	r31, r25
 658:	d1 f7       	brne	.-12     	; 0x64e <updateLCDTick+0x152>
		break;
		
		default:
		break;
	}
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	ff 90       	pop	r15
 664:	ef 90       	pop	r14
 666:	08 95       	ret

00000668 <LCDBuildChar>:
 
 
//custom characters reference:
//https://www.electronicwings.com/avr-atmega/lcd-custom-character-display-using-atmega-16-32-
 void LCDBuildChar(unsigned char loc, unsigned char *p)
 {
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	8b 01       	movw	r16, r22
	 unsigned char i;
	 if(loc<8) //If valid address
 672:	88 30       	cpi	r24, 0x08	; 8
 674:	68 f4       	brcc	.+26     	; 0x690 <LCDBuildChar+0x28>
	 {
		 LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
 676:	88 0f       	add	r24, r24
 678:	88 0f       	add	r24, r24
 67a:	88 0f       	add	r24, r24
 67c:	80 5c       	subi	r24, 0xC0	; 192
 67e:	37 dd       	rcall	.-1426   	; 0xee <LCD_WriteCommand>
 680:	e8 01       	movw	r28, r16
 682:	08 5f       	subi	r16, 0xF8	; 248
 684:	1f 4f       	sbci	r17, 0xFF	; 255
		 for(i=0;i<8;i++)
		 {
			 
		 
		 LCD_WriteData(p[i]); //Write the character pattern to CGRAM
 686:	89 91       	ld	r24, Y+
 688:	4d dd       	rcall	.-1382   	; 0x124 <LCD_WriteData>
 {
	 unsigned char i;
	 if(loc<8) //If valid address
	 {
		 LCD_WriteCommand(0x40+(loc*8)); //Write to CGRAM
		 for(i=0;i<8;i++)
 68a:	c0 17       	cp	r28, r16
 68c:	d1 07       	cpc	r29, r17
		 
		 LCD_WriteData(p[i]); //Write the character pattern to CGRAM
		 }
	 }

	 LCD_WriteCommand(0x80); //shift back to DDRAM location 0
 68e:	d9 f7       	brne	.-10     	; 0x686 <LCDBuildChar+0x1e>
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	2d dd       	rcall	.-1446   	; 0xee <LCD_WriteCommand>
 }
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	08 95       	ret

0000069e <main>:
 
 
 
int main(void)
{	
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	60 97       	sbiw	r28, 0x10	; 16
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
	//custom characters reference: 
	//https://www.electronicwings.com/avr-atmega/lcd-custom-character-display-using-atmega-16-32-
	 
	unsigned char customPlayer[8] = {0b00001110,
 6b2:	88 e0       	ldi	r24, 0x08	; 8
 6b4:	e4 e1       	ldi	r30, 0x14	; 20
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	de 01       	movw	r26, r28
 6ba:	11 96       	adiw	r26, 0x01	; 1
 6bc:	01 90       	ld	r0, Z+
 6be:	0d 92       	st	X+, r0
 6c0:	8a 95       	dec	r24
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <main+0x1e>
									 0b00000100,
									 0b00000100,
									 0b00001010,
									 0b00000000};	

unsigned char customBlock[8] = {0b00000000,
 6c4:	88 e0       	ldi	r24, 0x08	; 8
 6c6:	ec e1       	ldi	r30, 0x1C	; 28
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	de 01       	movw	r26, r28
 6cc:	19 96       	adiw	r26, 0x09	; 9
 6ce:	01 90       	ld	r0, Z+
 6d0:	0d 92       	st	X+, r0
 6d2:	8a 95       	dec	r24
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <main+0x30>
								0b00001111,
								0b00000000,
								0b00000000};


	DDRD = 0xF0; PORTD = 0x0F;
 6d6:	80 ef       	ldi	r24, 0xF0	; 240
 6d8:	8a b9       	out	0x0a, r24	; 10
 6da:	8f e0       	ldi	r24, 0x0F	; 15
 6dc:	8b b9       	out	0x0b, r24	; 11
	
	//DDRD = 0xFF; PORTD = 0x00;
	DDRB = 0xFF; PORTB = 0x00;
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	84 b9       	out	0x04, r24	; 4
 6e2:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 6e4:	11 b8       	out	0x01, r1	; 1
 6e6:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 6e8:	87 b9       	out	0x07, r24	; 7
 6ea:	18 b8       	out	0x08, r1	; 8
	
	LCD_init();
 6ec:	0c dd       	rcall	.-1512   	; 0x106 <LCD_init>
	LCDBuildChar(1, customPlayer);
 6ee:	be 01       	movw	r22, r28
 6f0:	6f 5f       	subi	r22, 0xFF	; 255
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	b8 df       	rcall	.-144    	; 0x668 <LCDBuildChar>
	LCDBuildChar(2, customBlock);
 6f8:	be 01       	movw	r22, r28
 6fa:	67 5f       	subi	r22, 0xF7	; 247
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	82 e0       	ldi	r24, 0x02	; 2

	initUSART(0);
 700:	b3 df       	rcall	.-154    	; 0x668 <LCDBuildChar>
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	bf dd       	rcall	.-1154   	; 0x284 <initUSART>
	ADC_init();	
 706:	f2 dd       	rcall	.-1052   	; 0x2ec <ADC_init>
	TimerSet(100);
 708:	64 e6       	ldi	r22, 0x64	; 100
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 710:	48 dd       	rcall	.-1392   	; 0x1a2 <TimerSet>
 712:	58 dd       	rcall	.-1360   	; 0x1c4 <TimerOn>
	srand(42);
 714:	8a e2       	ldi	r24, 0x2A	; 42
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	d0 d0       	rcall	.+416    	; 0x8ba <srand>
		

		
		
		
		if(JSTimer == JS_TIME)
 71a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <JSTimer>
 71e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <JS_TIME>
 722:	89 13       	cpse	r24, r25
 724:	04 c0       	rjmp	.+8      	; 0x72e <main+0x90>
		{
			JSTick();
 726:	e8 dd       	rcall	.-1072   	; 0x2f8 <JSTick>
 728:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <JSTimer>
			JSTimer = 0;	
 72c:	03 c0       	rjmp	.+6      	; 0x734 <main+0x96>
 72e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		else
		{
			++JSTimer;
 730:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <JSTimer>
		}
		
		if(blockGenerateTimer == BLOCK_GENERATE_TIME)
 734:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <blockGenerateTimer>
 738:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <BLOCK_GENERATE_TIME>
 73c:	89 13       	cpse	r24, r25
 73e:	04 c0       	rjmp	.+8      	; 0x748 <main+0xaa>
		{
			generateBlocksTick();
 740:	69 de       	rcall	.-814    	; 0x414 <generateBlocksTick>
 742:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <blockGenerateTimer>
			blockGenerateTimer = 0;
 746:	03 c0       	rjmp	.+6      	; 0x74e <main+0xb0>
		}
		else
		{
			++blockGenerateTimer;
 748:	8f 5f       	subi	r24, 0xFF	; 255
 74a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <blockGenerateTimer>
		}

		if(blockUpdateTimer > BLOCK_UPDATE_TIME)
 74e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <blockUpdateTimer>
 752:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <BLOCK_UPDATE_TIME>
 756:	98 17       	cp	r25, r24
 758:	20 f4       	brcc	.+8      	; 0x762 <main+0xc4>
		{
			updateBlocksTick();
 75a:	9c de       	rcall	.-712    	; 0x494 <updateBlocksTick>
 75c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <blockUpdateTimer>
			blockUpdateTimer = 0;
 760:	03 c0       	rjmp	.+6      	; 0x768 <main+0xca>
 762:	8f 5f       	subi	r24, 0xFF	; 255
		}
		else
		{
			++blockUpdateTimer;	
 764:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <blockUpdateTimer>
 768:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <blockUpspeedTimer>
		}
	
		
		if(blockUpspeedTimer == BLOCK_UPSPEED_TIME)
 76c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <BLOCK_UPSPEED_TIME>
 770:	89 13       	cpse	r24, r25
 772:	0a c0       	rjmp	.+20     	; 0x788 <main+0xea>
 774:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <BLOCK_UPDATE_TIME>
		{
			if(BLOCK_UPDATE_TIME > 1)
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	18 f0       	brcs	.+6      	; 0x782 <main+0xe4>
 77c:	81 50       	subi	r24, 0x01	; 1
			{
				--BLOCK_UPDATE_TIME;
 77e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <BLOCK_UPDATE_TIME>
 782:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <blockUpspeedTimer>
			}

			blockUpspeedTimer = 0;
 786:	03 c0       	rjmp	.+6      	; 0x78e <main+0xf0>
 788:	8f 5f       	subi	r24, 0xFF	; 255
		}
		else
		{
			++blockUpspeedTimer;
 78a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <blockUpspeedTimer>
 78e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <playerScoreTimer>
		}

		if(playerScoreTimer == PLAYER_SCORE_UPDATE_TIME)
 792:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <PLAYER_SCORE_UPDATE_TIME>
 796:	89 13       	cpse	r24, r25
 798:	14 c0       	rjmp	.+40     	; 0x7c2 <main+0x124>
 79a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <playerScore>
		{
			
			++playerScore;
 79e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <playerScore+0x1>
 7a2:	01 96       	adiw	r24, 0x01	; 1
 7a4:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <playerScore+0x1>
 7a8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <playerScore>
 7ac:	4a e0       	ldi	r20, 0x0A	; 10
 7ae:	6e e4       	ldi	r22, 0x4E	; 78
 7b0:	71 e0       	ldi	r23, 0x01	; 1
			itoa(playerScore, playerScoreStr, 10);
			LCD_DisplayString_M( 13, playerScoreStr );
 7b2:	8e d0       	rcall	.+284    	; 0x8d0 <__itoa_ncheck>
 7b4:	6e e4       	ldi	r22, 0x4E	; 78
 7b6:	71 e0       	ldi	r23, 0x01	; 1
 7b8:	8d e0       	ldi	r24, 0x0D	; 13
 7ba:	de dc       	rcall	.-1604   	; 0x178 <LCD_DisplayString_M>
			playerScoreTimer = 0;
 7bc:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <playerScoreTimer>
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <main+0x12a>
		}
		else
		{
			++playerScoreTimer;
 7c2:	8f 5f       	subi	r24, 0xFF	; 255
 7c4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <playerScoreTimer>
		}
		
						
		updateLCDTick();
 7c8:	99 de       	rcall	.-718    	; 0x4fc <updateLCDTick>
 7ca:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <TimerFlag>
						//if (USART_IsSendReady(0))
						//{
							//USART_Send("HELLO", 0);
						//}
		while (!TimerFlag){}
 7ce:	88 23       	and	r24, r24
 7d0:	e1 f3       	breq	.-8      	; 0x7ca <main+0x12c>
 7d2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <TimerFlag>
		TimerFlag = 0;
 7d6:	a1 cf       	rjmp	.-190    	; 0x71a <main+0x7c>

000007d8 <__divmodhi4>:
    }
 7d8:	97 fb       	bst	r25, 7
 7da:	07 2e       	mov	r0, r23
 7dc:	16 f4       	brtc	.+4      	; 0x7e2 <__divmodhi4+0xa>
 7de:	00 94       	com	r0
 7e0:	06 d0       	rcall	.+12     	; 0x7ee <__divmodhi4_neg1>
 7e2:	77 fd       	sbrc	r23, 7
 7e4:	08 d0       	rcall	.+16     	; 0x7f6 <__divmodhi4_neg2>
 7e6:	0b d0       	rcall	.+22     	; 0x7fe <__udivmodhi4>
 7e8:	07 fc       	sbrc	r0, 7
 7ea:	05 d0       	rcall	.+10     	; 0x7f6 <__divmodhi4_neg2>
 7ec:	3e f4       	brtc	.+14     	; 0x7fc <__divmodhi4_exit>

000007ee <__divmodhi4_neg1>:
 7ee:	90 95       	com	r25
 7f0:	81 95       	neg	r24
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <__divmodhi4_neg2>:
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255

000007fc <__divmodhi4_exit>:
 7fc:	08 95       	ret

000007fe <__udivmodhi4>:
 7fe:	aa 1b       	sub	r26, r26
 800:	bb 1b       	sub	r27, r27
 802:	51 e1       	ldi	r21, 0x11	; 17
 804:	07 c0       	rjmp	.+14     	; 0x814 <__udivmodhi4_ep>

00000806 <__udivmodhi4_loop>:
 806:	aa 1f       	adc	r26, r26
 808:	bb 1f       	adc	r27, r27
 80a:	a6 17       	cp	r26, r22
 80c:	b7 07       	cpc	r27, r23
 80e:	10 f0       	brcs	.+4      	; 0x814 <__udivmodhi4_ep>
 810:	a6 1b       	sub	r26, r22
 812:	b7 0b       	sbc	r27, r23

00000814 <__udivmodhi4_ep>:
 814:	88 1f       	adc	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	5a 95       	dec	r21
 81a:	a9 f7       	brne	.-22     	; 0x806 <__udivmodhi4_loop>
 81c:	80 95       	com	r24
 81e:	90 95       	com	r25
 820:	bc 01       	movw	r22, r24
 822:	cd 01       	movw	r24, r26
 824:	08 95       	ret

00000826 <do_rand>:
 826:	8f 92       	push	r8
 828:	9f 92       	push	r9
 82a:	af 92       	push	r10
 82c:	bf 92       	push	r11
 82e:	cf 92       	push	r12
 830:	df 92       	push	r13
 832:	ef 92       	push	r14
 834:	ff 92       	push	r15
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	ec 01       	movw	r28, r24
 83c:	68 81       	ld	r22, Y
 83e:	79 81       	ldd	r23, Y+1	; 0x01
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	9b 81       	ldd	r25, Y+3	; 0x03
 844:	61 15       	cp	r22, r1
 846:	71 05       	cpc	r23, r1
 848:	81 05       	cpc	r24, r1
 84a:	91 05       	cpc	r25, r1
 84c:	21 f4       	brne	.+8      	; 0x856 <do_rand+0x30>
 84e:	64 e2       	ldi	r22, 0x24	; 36
 850:	79 ed       	ldi	r23, 0xD9	; 217
 852:	8b e5       	ldi	r24, 0x5B	; 91
 854:	97 e0       	ldi	r25, 0x07	; 7
 856:	2d e1       	ldi	r18, 0x1D	; 29
 858:	33 ef       	ldi	r19, 0xF3	; 243
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	6b d0       	rcall	.+214    	; 0x936 <__divmodsi4>
 860:	49 01       	movw	r8, r18
 862:	5a 01       	movw	r10, r20
 864:	9b 01       	movw	r18, r22
 866:	ac 01       	movw	r20, r24
 868:	a7 ea       	ldi	r26, 0xA7	; 167
 86a:	b1 e4       	ldi	r27, 0x41	; 65
 86c:	80 d0       	rcall	.+256    	; 0x96e <__muluhisi3>
 86e:	6b 01       	movw	r12, r22
 870:	7c 01       	movw	r14, r24
 872:	ac ee       	ldi	r26, 0xEC	; 236
 874:	b4 ef       	ldi	r27, 0xF4	; 244
 876:	a5 01       	movw	r20, r10
 878:	94 01       	movw	r18, r8
 87a:	85 d0       	rcall	.+266    	; 0x986 <__mulohisi3>
 87c:	dc 01       	movw	r26, r24
 87e:	cb 01       	movw	r24, r22
 880:	8c 0d       	add	r24, r12
 882:	9d 1d       	adc	r25, r13
 884:	ae 1d       	adc	r26, r14
 886:	bf 1d       	adc	r27, r15
 888:	b7 ff       	sbrs	r27, 7
 88a:	03 c0       	rjmp	.+6      	; 0x892 <do_rand+0x6c>
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	a1 09       	sbc	r26, r1
 890:	b0 48       	sbci	r27, 0x80	; 128
 892:	88 83       	st	Y, r24
 894:	99 83       	std	Y+1, r25	; 0x01
 896:	aa 83       	std	Y+2, r26	; 0x02
 898:	bb 83       	std	Y+3, r27	; 0x03
 89a:	9f 77       	andi	r25, 0x7F	; 127
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	df 90       	pop	r13
 8a6:	cf 90       	pop	r12
 8a8:	bf 90       	pop	r11
 8aa:	af 90       	pop	r10
 8ac:	9f 90       	pop	r9
 8ae:	8f 90       	pop	r8
 8b0:	08 95       	ret

000008b2 <rand_r>:
 8b2:	b9 cf       	rjmp	.-142    	; 0x826 <do_rand>

000008b4 <rand>:
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	b6 cf       	rjmp	.-148    	; 0x826 <do_rand>

000008ba <srand>:
 8ba:	a0 e0       	ldi	r26, 0x00	; 0
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 8c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 8c6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 8ca:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 8ce:	08 95       	ret

000008d0 <__itoa_ncheck>:
 8d0:	bb 27       	eor	r27, r27
 8d2:	4a 30       	cpi	r20, 0x0A	; 10
 8d4:	31 f4       	brne	.+12     	; 0x8e2 <__itoa_ncheck+0x12>
 8d6:	99 23       	and	r25, r25
 8d8:	22 f4       	brpl	.+8      	; 0x8e2 <__itoa_ncheck+0x12>
 8da:	bd e2       	ldi	r27, 0x2D	; 45
 8dc:	90 95       	com	r25
 8de:	81 95       	neg	r24
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__utoa_common>

000008e4 <__utoa_ncheck>:
 8e4:	bb 27       	eor	r27, r27

000008e6 <__utoa_common>:
 8e6:	fb 01       	movw	r30, r22
 8e8:	55 27       	eor	r21, r21
 8ea:	aa 27       	eor	r26, r26
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	aa 1f       	adc	r26, r26
 8f2:	a4 17       	cp	r26, r20
 8f4:	10 f0       	brcs	.+4      	; 0x8fa <__utoa_common+0x14>
 8f6:	a4 1b       	sub	r26, r20
 8f8:	83 95       	inc	r24
 8fa:	50 51       	subi	r21, 0x10	; 16
 8fc:	b9 f7       	brne	.-18     	; 0x8ec <__utoa_common+0x6>
 8fe:	a0 5d       	subi	r26, 0xD0	; 208
 900:	aa 33       	cpi	r26, 0x3A	; 58
 902:	08 f0       	brcs	.+2      	; 0x906 <__utoa_common+0x20>
 904:	a9 5d       	subi	r26, 0xD9	; 217
 906:	a1 93       	st	Z+, r26
 908:	00 97       	sbiw	r24, 0x00	; 0
 90a:	79 f7       	brne	.-34     	; 0x8ea <__utoa_common+0x4>
 90c:	b1 11       	cpse	r27, r1
 90e:	b1 93       	st	Z+, r27
 910:	11 92       	st	Z+, r1
 912:	cb 01       	movw	r24, r22
 914:	00 c0       	rjmp	.+0      	; 0x916 <strrev>

00000916 <strrev>:
 916:	dc 01       	movw	r26, r24
 918:	fc 01       	movw	r30, r24
 91a:	67 2f       	mov	r22, r23
 91c:	71 91       	ld	r23, Z+
 91e:	77 23       	and	r23, r23
 920:	e1 f7       	brne	.-8      	; 0x91a <strrev+0x4>
 922:	32 97       	sbiw	r30, 0x02	; 2
 924:	04 c0       	rjmp	.+8      	; 0x92e <strrev+0x18>
 926:	7c 91       	ld	r23, X
 928:	6d 93       	st	X+, r22
 92a:	70 83       	st	Z, r23
 92c:	62 91       	ld	r22, -Z
 92e:	ae 17       	cp	r26, r30
 930:	bf 07       	cpc	r27, r31
 932:	c8 f3       	brcs	.-14     	; 0x926 <strrev+0x10>
 934:	08 95       	ret

00000936 <__divmodsi4>:
 936:	05 2e       	mov	r0, r21
 938:	97 fb       	bst	r25, 7
 93a:	16 f4       	brtc	.+4      	; 0x940 <__divmodsi4+0xa>
 93c:	00 94       	com	r0
 93e:	0f d0       	rcall	.+30     	; 0x95e <__negsi2>
 940:	57 fd       	sbrc	r21, 7
 942:	05 d0       	rcall	.+10     	; 0x94e <__divmodsi4_neg2>
 944:	24 d0       	rcall	.+72     	; 0x98e <__udivmodsi4>
 946:	07 fc       	sbrc	r0, 7
 948:	02 d0       	rcall	.+4      	; 0x94e <__divmodsi4_neg2>
 94a:	46 f4       	brtc	.+16     	; 0x95c <__divmodsi4_exit>
 94c:	08 c0       	rjmp	.+16     	; 0x95e <__negsi2>

0000094e <__divmodsi4_neg2>:
 94e:	50 95       	com	r21
 950:	40 95       	com	r20
 952:	30 95       	com	r19
 954:	21 95       	neg	r18
 956:	3f 4f       	sbci	r19, 0xFF	; 255
 958:	4f 4f       	sbci	r20, 0xFF	; 255
 95a:	5f 4f       	sbci	r21, 0xFF	; 255

0000095c <__divmodsi4_exit>:
 95c:	08 95       	ret

0000095e <__negsi2>:
 95e:	90 95       	com	r25
 960:	80 95       	com	r24
 962:	70 95       	com	r23
 964:	61 95       	neg	r22
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	8f 4f       	sbci	r24, 0xFF	; 255
 96a:	9f 4f       	sbci	r25, 0xFF	; 255
 96c:	08 95       	ret

0000096e <__muluhisi3>:
 96e:	31 d0       	rcall	.+98     	; 0x9d2 <__umulhisi3>
 970:	a5 9f       	mul	r26, r21
 972:	90 0d       	add	r25, r0
 974:	b4 9f       	mul	r27, r20
 976:	90 0d       	add	r25, r0
 978:	a4 9f       	mul	r26, r20
 97a:	80 0d       	add	r24, r0
 97c:	91 1d       	adc	r25, r1
 97e:	11 24       	eor	r1, r1
 980:	08 95       	ret

00000982 <__mulshisi3>:
 982:	b7 ff       	sbrs	r27, 7
 984:	f4 cf       	rjmp	.-24     	; 0x96e <__muluhisi3>

00000986 <__mulohisi3>:
 986:	f3 df       	rcall	.-26     	; 0x96e <__muluhisi3>
 988:	82 1b       	sub	r24, r18
 98a:	93 0b       	sbc	r25, r19
 98c:	08 95       	ret

0000098e <__udivmodsi4>:
 98e:	a1 e2       	ldi	r26, 0x21	; 33
 990:	1a 2e       	mov	r1, r26
 992:	aa 1b       	sub	r26, r26
 994:	bb 1b       	sub	r27, r27
 996:	fd 01       	movw	r30, r26
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <__udivmodsi4_ep>

0000099a <__udivmodsi4_loop>:
 99a:	aa 1f       	adc	r26, r26
 99c:	bb 1f       	adc	r27, r27
 99e:	ee 1f       	adc	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	a2 17       	cp	r26, r18
 9a4:	b3 07       	cpc	r27, r19
 9a6:	e4 07       	cpc	r30, r20
 9a8:	f5 07       	cpc	r31, r21
 9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__udivmodsi4_ep>
 9ac:	a2 1b       	sub	r26, r18
 9ae:	b3 0b       	sbc	r27, r19
 9b0:	e4 0b       	sbc	r30, r20
 9b2:	f5 0b       	sbc	r31, r21

000009b4 <__udivmodsi4_ep>:
 9b4:	66 1f       	adc	r22, r22
 9b6:	77 1f       	adc	r23, r23
 9b8:	88 1f       	adc	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	1a 94       	dec	r1
 9be:	69 f7       	brne	.-38     	; 0x99a <__udivmodsi4_loop>
 9c0:	60 95       	com	r22
 9c2:	70 95       	com	r23
 9c4:	80 95       	com	r24
 9c6:	90 95       	com	r25
 9c8:	9b 01       	movw	r18, r22
 9ca:	ac 01       	movw	r20, r24
 9cc:	bd 01       	movw	r22, r26
 9ce:	cf 01       	movw	r24, r30
 9d0:	08 95       	ret

000009d2 <__umulhisi3>:
 9d2:	a2 9f       	mul	r26, r18
 9d4:	b0 01       	movw	r22, r0
 9d6:	b3 9f       	mul	r27, r19
 9d8:	c0 01       	movw	r24, r0
 9da:	a3 9f       	mul	r26, r19
 9dc:	70 0d       	add	r23, r0
 9de:	81 1d       	adc	r24, r1
 9e0:	11 24       	eor	r1, r1
 9e2:	91 1d       	adc	r25, r1
 9e4:	b2 9f       	mul	r27, r18
 9e6:	70 0d       	add	r23, r0
 9e8:	81 1d       	adc	r24, r1
 9ea:	11 24       	eor	r1, r1
 9ec:	91 1d       	adc	r25, r1
 9ee:	08 95       	ret

000009f0 <_exit>:
 9f0:	f8 94       	cli

000009f2 <__stop_program>:
 9f2:	ff cf       	rjmp	.-2      	; 0x9f2 <__stop_program>
